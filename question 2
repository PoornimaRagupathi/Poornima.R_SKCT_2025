Example


Return '12:01:00'.


Return '00:01:00'.

Function Description

Complete the timeConversion function in the editor below. It should return a new string representing the input time in 24 hour format.

timeConversion has the following parameter(s):

string s: a time in  hour format
Returns

string: the time in  hour format
Input Format

A single string  that represents a time in -hour clock format (i.e.:  or ).

Constraints

All input times are valid
Sample Input 0

07:05:45PM
Sample Output 0

19:05:45
Submissions: 180
Max Score: 15
Difficulty: Easy
Rate This Challenge:

    
More
 
1
import java.io.*;
2
import java.math.*;
3
import java.security.*;
4
import java.text.*;
5
import java.util.*;
6
import java.util.concurrent.*;
7
import java.util.function.*;
8
import java.util.regex.*;
9
import java.util.stream.*;
10
import static java.util.stream.Collectors.joining;
11
import static java.util.stream.Collectors.toList;
12
​
13
class Result {
14
​
15
    /*
16
     * Complete the 'timeConversion' function below.
17
     *
18
     * The function is expected to return a STRING.
19
     * The function accepts STRING s as parameter.
20
     */
21
​
22
    public static String timeConversion(String s) {
23
    // Write your code here
24
​
25
    }
26
​
27
     }
28
​
29
     public class Solution {
30
      public static void main(String[] args) throws IOException {
31
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
32
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));
33
​
34
        String s = bufferedReader.readLine();
35
​
36
        String result = Result.timeConversion(s);
37
​
38
        bufferedWriter.write(result);
39
        bufferedWriter.newLine();
40
​
41
        bufferedReader.close();
42
        bufferedWriter.close();
43
    }
44
      }
45
​
